{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gTA2BeA,MAvBf,YAAwD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC1C,OAAO,yBAAKC,UAAU,SAClB,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UAAUD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAClC,wBAAIC,IAAKD,EAAOL,UAAU,iBAAiBI,OAE5C,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAE,KAA/C,UC0CGC,G,kNAjDbC,MAAQ,CACNC,WAAW,EACXC,OAAO,I,EAGTC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,yDANQ,gBAGCJ,EAHD,EAERK,KACEA,KAAOL,OAKX,EAAKM,SAAS,CAACN,SAAQD,WAAU,IARvB,2C,kEAYVQ,KAAKN,c,+BAGG,IAAD,EACqBM,KAAKT,MAA1BC,EADA,EACAA,UAAWC,EADX,EACWA,OAClB,OACE,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,cAAhB,eAGF,yBAAKA,UAAU,UACZW,EAAOR,KAAI,SAAAgB,GAAK,OACf,kBAAC,EAAD,CACEb,IAAKa,EAAMC,GACXA,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,kB,GAvCZuB,IAAMC,YCDxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.b94b2f99.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\"\r\n\r\nfunction Movie({year, title, summary, poster, genres}) {\r\n    return <div className=\"movie\">\r\n        <img src={poster} alt={title} title={title}></img>\r\n        <div className=\"movie__data\">\r\n            <h3 className=\"movie__title\">{title}</h3>\r\n            <h5 className=\"movie__year\">{year}</h5>\r\n            <ul className=\"genres\">{genres.map((genre, index) => \r\n            (<li key={index} className=\"genres__genre\">{genre}</li>))}\r\n            </ul>\r\n            <p className=\"movie__summary\">{summary.slice(0,140)}...</p>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies:[]\n  }\n  \n  getMovies = async () => {\n    const {\n      data: {\n        data: {movies}\n      }\n    } = await axios.get(\n      \"https://yts.mx/api/v2/list_movies.json?sort_by=rating\"\n    );\n    this.setState({movies, isLoading:false});\n  } //async, await 함수가 로딩 되는 것을 기다림\n\n  componentDidMount() {\n    this.getMovies(); \n  }\n\n  render() {\n    const {isLoading, movies} = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? ( \n          <div className=\"loader\">\n            <span className=\"load__text\">Loading...</span>\n          </div>\n          ) : (\n          <div className=\"movies\"> \n            {movies.map(movie => (\n              <Movie \n                key={movie.id}\n                id={movie.id} \n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div> \n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n\n/*\n---------------------\n<<<Class Component>>>\n---------------------\nclass App extends React.Component{\n  state = {\n    count: 0\n  } // state는 obj, 데이터는 변함\n  add = () => {\n    this.setState(current => ({count:current.count + 1}))\n  };\n  minus = () => {\n    this.setState(current => ({count:current.count - 1}))\n  };\n  render() {\n    return (\n      <div>\n        <h1>The number is {this.state.count}</h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );\n  }\n} //class component : react component로부터 확장, react는 자동으로 render method를 실행\n\nexport default App;\n\n------------------------\n<<<Function component>>>\n------------------------\n\nfunction Food({name, price, rating}) {\n  return <div>\n    <h2>I like {name}</h2>\n    <h4>price : {price} | rating : {rating}/5.0</h4>\n    </div>\n}\n\nFood.propTypes = {\n  name: Proptypes.string.isRequired,\n  price: Proptypes.string.isRequired,\n  rating: Proptypes.number\n}\n//.array, .bool, .func, .number, .object, .string, .symbol\n//Proptypes.objectOf(Proptypes.number)\n\nconst foodList = [\n  {id:1, name:\"Kimch\", price:\"1000 won\", rating:4.3},\n  {id:2, name:\"Ramen\", price:\"2000 won\", rating:4.1},\n  {id:3, name:\"Bibimbab\", price:\"3000 won\", rating:4.5},\n  {id:4, name:\"Chukumi\", price:\"4000 won\", rating:4.9},\n  {id:5, name:\"Donkasu\", price:\"5000 won\", rating:4.8},\n]\n\nfunction renderFood(dish) {\n  return <Food key={dish.id} name={dish.name} price={dish.price} rating={dish.rating}/>\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {foodList.map(renderFood)}\n    </div>\n  );\n}\n\nexport default App;\n----------------------------------------------------------------------\n\nJSX = html + JavaScript\nprops.name = {name} (같은 의미) 를 통해 component를 재사용할 수 있다.\ncomponent는 대문자로 시작해야한다.\ncomponent를 통해 정보를 보낼 수 있다.\nprops : component에 넣게 되는 것 ex)name,price\nprops는 argument로 간다.\n[array].map(function(){\n  ...  \n}) : map은 function을 array[n]각각에 적용시킨다.\n\n{ foodList.map( function(dish) {\n    return <Food name={dish.name}/>;\n    }\n  )\n} \n==\n{ foodList.map( {dish} => <Food name={dish.name}/> ) }\ndish는 object이다(중요)\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n/*\n<APP/> : component (JS를 통해 html에 return하는 기능)\nJSX = html + JS (React 개념)\n\nreact application(ReactDom.render())은 한 번에 하나의 component(<App />)만 rendering 할 수 있으므로\n하나의 component 안에 다른 component를 포함시켜야 많은 component를 import 할 수 있다.\n\ncomponent는 재사용할 수 있다. (React의 장점)\n*/"],"sourceRoot":""}